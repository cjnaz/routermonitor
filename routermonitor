#!/usr/bin/env python3
"""Monitor for new devices/clients on the network.

The dd-wrt-based network router is queried for known DHCP clients using 
    $ ssh root@<ROUTER_IP> cat /tmp/dnsmasq.leases
Any new clients are identified and a notification is sent.  
See the README.md for setup requirements.
"""

__version__ = "V0.6 210215"


#==========================================================
#
#  Chris Nelson, January 2020
#
# 210215 V0.6   Added --swizzle-db, --swizzle-commit, and reworked first_seen and expiry to Int storage.
# 210125 V0.5   Added --service mode
# 200715 v0.4   Added --sort-by
# 200530 v0.3   Added database record search
# 200527 v0.2.2 Bug fix for single line lookup_MAC response losing last letter.
# 200526 v0.2.1 Bug fix for finding not just first new device on an update run.
# 200522 v0.2   Track host name changes, support single quotes in notes, support older subprocess.checkoutput()
# 200426 v0.1   New
#
# Changes pending
#   
#==========================================================

import argparse
import subprocess
import sys
import re
import time
import datetime
import os.path
import collections
import mysql.connector
import requests

sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '../funcs3/'))    # funcs3 in peer dir
from funcs3 import setuplogging, logging, loadconfig, getcfg, snd_notif, funcs3_min_version_check, funcs3_version, cfg

# Configs / Constants
FUNCS3_MIN_VERSION = 0.5
CONFIG_FILE = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'config.cfg')
# See config.cfg for DB params

py_version = float(sys.version_info.major) + float(sys.version_info.minor)/10

setuplogging(logfile= 'log.txt')
loadconfig  (cfgfile= CONFIG_FILE)


def main():

    # Check for database access and populate if non-existing
    db_connection = mysql.connector.connect(host=getcfg("DB_HOST"), user=getcfg("DB_USER"), passwd=getcfg("DB_PASS"))
    db_cursor = db_connection.cursor()
    db_cursor.execute("SHOW DATABASES")
    found = False
    for db in db_cursor:
        if getcfg("DB_DB") in db[0]:
            found = True
            break
    if not found:
        print(f"ERROR:  Manually create the <{getcfg('DB_DB')}> database.")
        sys.exit(1)

    db_connection = mysql.connector.connect(database=getcfg("DB_DB"), host=getcfg("DB_HOST"), user=getcfg("DB_USER"), passwd=getcfg("DB_PASS"))
    db_cursor = db_connection.cursor(buffered=True, dictionary=True)
    db_cursor.execute("SHOW TABLES")
    found = False
    for row in db_cursor:
        if getcfg('DB_TABLE') in row['Tables_in_' + getcfg('DB_DB')]:
            found = True
            break

    if found and args.create_db:
        db_cursor.execute(f"DROP TABLE {getcfg('DB_TABLE')}")
        db_connection.commit()

    db_fields = "MAC VARCHAR(17), hostname VARCHAR(25), notes VARCHAR(50), first_seen INT, expiry INT, IP VARCHAR(15), MACOUI VARCHAR(30)"
    def db_add_client(MAC, record):
        cmd = "INSERT INTO {} (MAC, MACOUI, hostname, notes, first_seen, IP, expiry) VALUES (\'{}\', \'{}\', \'{}\', \'{}\', {}, \'{}\', {})".format(
            getcfg('DB_TABLE'),
            MAC,
            lookup_MAC(MAC),
            record['hostname'],
            "-",
            time.time(),
            record['IP'],
            record['expiry'])
        db_cursor.execute(cmd)

    if not found or args.create_db:
        router_clients = get_router_clients()
        db_cursor.execute(f"CREATE TABLE {getcfg('DB_TABLE')} ({db_fields})")

        for MAC in router_clients:
            db_add_client (MAC, router_clients[MAC])
        db_connection.commit()


    # Swizzle database table structure or contents
    if args.swizzle_db:
        # When upgrading, cfg[DB_TABLE] will reference a table in the old format, and a _new table will be created in the new format (and recreated on successive runs).
        # This code will deal with the old to new adjustments when building the _new table.
        # If not '--commit'ed, cfg[DB_TABLE] is jammed with the _new table name.
        # If '--commit'ed, the original table is renamed _bak, and _new is renamed to match as defined in the config file.
        # Use model:
        #   './routermonitor -l --swizzle-db' while debugging database modifications.  Creates an _new table and displays it.
        #   Change the config file to reference the _new table while debugging new code, and run without --swizzle-db.
        #   Then finally './routermonitor --swizzle-db --swizzle-commit'.

        table_new = getcfg("DB_TABLE") + "_new"
        db_cursor.execute("SHOW TABLES")
        for row in db_cursor:
            if table_new in row['Tables_in_' + getcfg('DB_DB')]:
                print(f"Swizzle info:  Found existing new table <{table_new}>.  Deleting.")
                db_cursor.execute(f"DROP TABLE {table_new}")
                break
        db_cursor.execute(f"CREATE TABLE {table_new} ({db_fields})")

        # Make adjustments
        database_clients = get_database_clients()
        epoch1970 = datetime.datetime(1970, 1, 1, tzinfo=datetime.timezone.utc)     # tz aware
        for MAC in database_clients:
            first_seen = database_clients[MAC]['first_seen'] + " -0700"
            first_seenI = int((datetime.datetime.strptime(first_seen, "%a %b %d %H:%M:%S %Y %z") - epoch1970).total_seconds())

            expiry = database_clients[MAC]['expiry']
            if expiry == "static lease":
                expiryI = 0
            else:
                expiry += " -0700"
                expiryI = int((datetime.datetime.strptime(expiry, "%a %b %d %H:%M:%S %Y %z") - epoch1970).total_seconds())

            cmd = "INSERT INTO {} (MAC, MACOUI, hostname, notes, first_seen, IP, expiry) VALUES (\'{}\', \'{}\', \'{}\', \'{}\', {}, \'{}\', {})".format(
                table_new,
                MAC,
                database_clients[MAC]['MACOUI'],
                database_clients[MAC]['hostname'],
                database_clients[MAC]['notes'].replace("'", "''"),
                first_seenI,
                database_clients[MAC]['IP'],
                expiryI )
            db_cursor.execute(cmd)
        db_connection.commit()

        if not args.swizzle_commit:
            cfg['DB_TABLE'] = table_new
        else:
            db_cursor.execute(f"RENAME TABLE {getcfg('DB_TABLE')} to {getcfg('DB_TABLE')+'_bak'}")
            db_cursor.execute(f"RENAME TABLE {table_new} to {getcfg('DB_TABLE')}")
        db_connection.commit()


    # List known clients from database
    if args.list_db or args.SearchTerm != None:
        get_database_clients(dump=True, search=args.SearchTerm)
        sys.exit()


    # List known clients from router
    if args.list_router:
        get_router_clients(dump=True)
        sys.exit()


    # Add a note for a client to the database
    if args.add_note is not None:
        if args.MAC is None:
            print ("ERROR - Must specify the --MAC when using --add-note")
            sys.exit(1)
        db_cursor.execute(f"SELECT * FROM {getcfg('DB_TABLE')} WHERE MAC = '{args.MAC}'")
        if db_cursor.rowcount > 0:
            new_note = args.add_note.replace("'", "''")   # single quotes need to be doubled up in SQL
            db_cursor.execute(f"UPDATE {getcfg('DB_TABLE')} SET notes = '{new_note}' WHERE MAC = '{args.MAC}'")
            db_connection.commit()
        else:
            print (f"MAC address <{args.MAC}> not found in the database.")
            sys.exit(1)
        sys.exit()


    # Delete a client from the database
    if args.delete:
        if args.MAC is None:
            print ("ERROR - Must specify the --MAC when using --delete")
            sys.exit(1)
        db_cursor.execute(f"SELECT * FROM {getcfg('DB_TABLE')} WHERE MAC = '{args.MAC}'")
        if db_cursor.rowcount > 0:
            db_cursor.execute(f"DELETE FROM {getcfg('DB_TABLE')} WHERE MAC = '{args.MAC}'")
            db_connection.commit()
        else:
            print (f"MAC address <{args.MAC}> not found in the database.")
            sys.exit(1)
        sys.exit()


    # Update database from router
    def do_update():
        router_clients = get_router_clients()
        database_clients = get_database_clients()
        for MAC in router_clients:
            if MAC not in database_clients:
                msg = f"\n{router_clients[MAC]['hostname']}\n{router_clients[MAC]['IP']}\n{MAC}\n{lookup_MAC(MAC)}"
                snd_notif (subj="New LAN client found", msg=msg, log=True)
                db_add_client (MAC, router_clients[MAC])
                continue
            if router_clients[MAC]['hostname'] != database_clients[MAC]['hostname']:
                msg = (f"{MAC} / {database_clients[MAC]['hostname']:<20} New hostname: {router_clients[MAC]['hostname']}")
                logging.info(msg)
                db_cursor.execute(f"UPDATE {getcfg('DB_TABLE')} SET hostname = \'{router_clients[MAC]['hostname']}\' WHERE MAC = '{MAC}'")
            if router_clients[MAC]['IP'] != database_clients[MAC]['IP']:
                msg = (f"{MAC} / {database_clients[MAC]['hostname']:<20} New IP:       {router_clients[MAC]['IP']}")
                logging.info(msg)
                db_cursor.execute(f"UPDATE {getcfg('DB_TABLE')} SET IP = \'{router_clients[MAC]['IP']}\' WHERE MAC = '{MAC}'")
            if router_clients[MAC]['expiry'] != database_clients[MAC]['expiry']:
                msg = (f"{MAC} / {database_clients[MAC]['hostname']:<20} New expiry:   {router_clients[MAC]['expiry']}")
                logging.info(msg)
                db_cursor.execute(f"UPDATE {getcfg('DB_TABLE')} SET expiry = \'{router_clients[MAC]['expiry']}\' WHERE MAC = '{MAC}'")

        db_connection.commit()

    if args.update:
        do_update()
        sys.exit()


    # Service mode
    if args.service:
        logging.warning(f"{__file__} {__version__} started")
        while 1:
            loadconfig  (cfgfile= CONFIG_FILE)      # Reload, allowing on-the-fly LoggingLevel and UpdateInterval changes
            do_update()
            time.sleep(getcfg("UpdateInterval"))


    print ("Nothing to do.  Use one of --list-db, --list-router, --update, --add-note, --delete, or --create-db.")
    sys.exit(1)


def get_database_clients(dump=False, search=None):
    """ Get clients currently in the database, return a dictionary of dictionaries, keyed by MAC
        {
            MAC:  { hostname:, IP:, expiry:, first_seen:, notes:, MACOUI: }
        }
    """
    db_connection = mysql.connector.connect(database=getcfg("DB_DB"), host=getcfg("DB_HOST"), user=getcfg("DB_USER"), passwd=getcfg("DB_PASS"))
    db_cursor = db_connection.cursor(buffered=True, dictionary=True)
    db_cursor.execute(f"SELECT * FROM {getcfg('DB_TABLE')}")
    clients_list = {}
    for row in db_cursor:
        clients_list[row['MAC']] = {
            "hostname":   row['hostname'],
            "IP":         row['IP'],
            "expiry":     row['expiry'],
            "first_seen": row['first_seen'],
            "notes":      row['notes'],
            "MACOUI":     row['MACOUI'] }

    if dump:
        if args.sort_by == 'MAC':
            clients_list = collections.OrderedDict(sorted(clients_list.items()))
        elif args.sort_by in "first_seen expiry":
            clients_list = collections.OrderedDict(sorted(clients_list.items(), key=lambda t:t[1][args.sort_by]))
        else:
            clients_list = collections.OrderedDict(sorted(clients_list.items(), key=lambda t:t[1][args.sort_by].lower()))
        first=True
        if search == None:
            search = ""
        search = search.lower()
        count = 0
        for MAC in clients_list:

            first_seen = time.asctime(time.localtime(int(clients_list[MAC]['first_seen'])))
            if clients_list[MAC]['expiry'] == 0:
                expiry = "static lease"
            else:
                expiry = time.asctime(time.localtime(int(clients_list[MAC]['expiry'])))

            if search=="" or \
                        search in MAC or \
                        search in clients_list[MAC]['hostname'].lower() or \
                        search in clients_list[MAC]['IP'] or \
                        search in expiry.lower() or \
                        search in first_seen.lower() or \
                        search in clients_list[MAC]['MACOUI'].lower() or \
                        search in clients_list[MAC]['notes'].lower():
                count += 1
                if first:
                    print(f"{'Hostname':<25}  {'First seen':<24}  {'Current IP':<13}  {'IP Expiry':<24}  {'MAC':<17}  {'MAC Org Unique ID':<30}  {'Notes'}")
                    first = False
                print("{:<25}  {:<24}  {:<13}  {:<24}  {:<17}  {:<30}  {}".format(
                    clients_list[MAC]['hostname'],
                    first_seen,
                    clients_list[MAC]['IP'],
                    expiry,
                    MAC,
                    clients_list[MAC]['MACOUI'],
                    clients_list[MAC]['notes']))
        print (f"  <{count}>  known clients.")

    return clients_list


def get_router_clients(dump=False):
    """ Get leases from the router, return a sorted dictionary of dictionaries, keyed by MAC
        {
            MAC:  { hostname:, IP:, expiry: }
        }
    """
    clients_list = {}
    try:
        _cmd = ["ssh", "root@" + getcfg("ROUTER_IP"), "cat", getcfg("ROUTER_DHCP")]
        if py_version >= 3.7:
            clients = subprocess.run(_cmd, capture_output=True, text=True).stdout.split("\n")
        else:   #Py 3.6 .run does not support capture_output, so use the old method.
            clients = subprocess.run(_cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True).stdout.split("\n")
    except Exception as e:
        print("Exception <{}>".format(e))
    # 1587457675 00:0d:c5:5c:82:6d 192.168.1.105 Hopper-ETH0 01:00:0d:c5:5c:82:6d
    line_re = re.compile(r"([\d]+) ([\dabcdef:]+) ([\d.]+) ([\S]+)") # [\dabcdef:]+")
    for line in clients:
        xx = line_re.match(line)
        if xx:
            clients_list[xx.group(2)] = {"hostname":xx.group(4), "IP":xx.group(3), "expiry":int(xx.group(1))}
        else:
            if len(line) > 0:
                print ("ERROR in get_router_clients:  This line looks bogus:\n  ", line)

    if dump:
        if args.sort_by == 'MAC':
            clients_list = collections.OrderedDict(sorted(clients_list.items()))
        elif args.sort_by in "hostname IP":
            clients_list = collections.OrderedDict(sorted(clients_list.items(), key=lambda t:t[1][args.sort_by].lower()))
        elif args.sort_by == "expiry":
            clients_list = collections.OrderedDict(sorted(clients_list.items(), key=lambda t:t[1][args.sort_by]))
        else:
            print ("ERROR in get_router_clients for --list-router:  --sort-by must be one of MAC, hostname, IP, or expiry")
            sys.exit(1)

        count = 0
        for client in clients_list:
            count += 1
            if clients_list[client]["expiry"] == 0:
                expiry = "static lease"
            else:
                expiry = time.asctime(time.localtime(clients_list[client]["expiry"]))
            print("{:<25} {} {:<13}  {}".format(
                expiry,
                client, 
                clients_list[client]["IP"],
                clients_list[client]["hostname"]))
        print (f"  <{count}>  known clients.")

    return clients_list


def lookup_MAC(MAC):
    r = requests.get("https://oidsearch.s.dd-wrt.com/search/" + MAC[0:8])
    if r.status_code == 200:
        _next = False
        for line in r.text.split("\n"):
            if _next:
                break
            if "<h2>" in line:
                _next = True
        if _next:
            if "<br>" in line:
                search_result = line[0:line.find("<br>")]
            else:
                search_result = line
            if search_result == "":
                search_result = "--none--"
    else:
        search_result = "OID search failed"

    return (search_result)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__ + __version__, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('SearchTerm', nargs='?',
                        help="Print database records containing this text.")
    parser.add_argument('-u', '--update', action="store_true",
                        help="Check the router for new connections and update database.")
    parser.add_argument('-l', '--list-db', action='store_true',
                        help="Print known clients on the network from the database.")
    parser.add_argument('-r', '--list-router', action='store_true',
                        help="Print known clients on the network from the router.")
    parser.add_argument('-s', '--sort-by', choices=['hostname', 'IP', 'first_seen', 'expiry', 'MAC', 'MACOUI', 'notes'], default='MAC',
                        help="Sort --list-db and --list-router output.  Default 'MAC'.")
    parser.add_argument('--create-db', action='store_true',
                        help="Create a fresh database and populate it with the current clients.")
    parser.add_argument('-a', '--add-note', type=str,
                        help="Add a note to the db for the specified --MAC.")
    parser.add_argument('--delete', action='store_true',
                        help="Delete from the db the specified --MAC.")
    parser.add_argument('-M', '--MAC', type=str,
                        help="MAC address for --add-note or --delete.")
    parser.add_argument('--service', action='store_true',
                        help="Run updates in an endless loop for use as a systemd service.")
    parser.add_argument('--swizzle-db', action='store_true',
                        help="Upgrade db structure/content.")
    parser.add_argument('--swizzle-commit', action='store_true',
                        help="Make db upgrade permanent (else temporary).")
    parser.add_argument('-V', '--version', action='version', version='%(prog)s ' + __version__,
                        help="Return version number and exit.")

    if len(sys.argv)==1:
        parser.print_help()
        sys.exit()

    args = parser.parse_args()

    if not funcs3_min_version_check(FUNCS3_MIN_VERSION):
        print(f"ERROR:  funcs3 module must be at least version <V{FUNCS3_MIN_VERSION}>.  Found <{funcs3_version}>.")
        sys.exit(1)

    main()
    sys.exit()
